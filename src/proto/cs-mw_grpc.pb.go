// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: cs-mw.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Front_ConvolutionalLayer_FullMethodName = "/mini.Front/ConvolutionalLayer"
)

// FrontClient is the client API for Front service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontClient interface {
	ConvolutionalLayer(ctx context.Context, in *ConvolutionalLayerFrontRequest, opts ...grpc.CallOption) (*ConvolutionalLayerFrontReply, error)
}

type frontClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontClient(cc grpc.ClientConnInterface) FrontClient {
	return &frontClient{cc}
}

func (c *frontClient) ConvolutionalLayer(ctx context.Context, in *ConvolutionalLayerFrontRequest, opts ...grpc.CallOption) (*ConvolutionalLayerFrontReply, error) {
	out := new(ConvolutionalLayerFrontReply)
	err := c.cc.Invoke(ctx, Front_ConvolutionalLayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontServer is the server API for Front service.
// All implementations must embed UnimplementedFrontServer
// for forward compatibility
type FrontServer interface {
	ConvolutionalLayer(context.Context, *ConvolutionalLayerFrontRequest) (*ConvolutionalLayerFrontReply, error)
	mustEmbedUnimplementedFrontServer()
}

// UnimplementedFrontServer must be embedded to have forward compatible implementations.
type UnimplementedFrontServer struct {
}

func (UnimplementedFrontServer) ConvolutionalLayer(context.Context, *ConvolutionalLayerFrontRequest) (*ConvolutionalLayerFrontReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvolutionalLayer not implemented")
}
func (UnimplementedFrontServer) mustEmbedUnimplementedFrontServer() {}

// UnsafeFrontServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontServer will
// result in compilation errors.
type UnsafeFrontServer interface {
	mustEmbedUnimplementedFrontServer()
}

func RegisterFrontServer(s grpc.ServiceRegistrar, srv FrontServer) {
	s.RegisterService(&Front_ServiceDesc, srv)
}

func _Front_ConvolutionalLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvolutionalLayerFrontRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontServer).ConvolutionalLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Front_ConvolutionalLayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontServer).ConvolutionalLayer(ctx, req.(*ConvolutionalLayerFrontRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Front_ServiceDesc is the grpc.ServiceDesc for Front service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Front_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mini.Front",
	HandlerType: (*FrontServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvolutionalLayer",
			Handler:    _Front_ConvolutionalLayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs-mw.proto",
}

const (
	Back_Cancel_FullMethodName             = "/mini.Back/Cancel"
	Back_ConvolutionalLayer_FullMethodName = "/mini.Back/ConvolutionalLayer"
)

// BackClient is the client API for Back service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackClient interface {
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelReply, error)
	ConvolutionalLayer(ctx context.Context, in *ConvolutionalLayerBackRequest, opts ...grpc.CallOption) (*ConvolutionalLayerBackReply, error)
}

type backClient struct {
	cc grpc.ClientConnInterface
}

func NewBackClient(cc grpc.ClientConnInterface) BackClient {
	return &backClient{cc}
}

func (c *backClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelReply, error) {
	out := new(CancelReply)
	err := c.cc.Invoke(ctx, Back_Cancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backClient) ConvolutionalLayer(ctx context.Context, in *ConvolutionalLayerBackRequest, opts ...grpc.CallOption) (*ConvolutionalLayerBackReply, error) {
	out := new(ConvolutionalLayerBackReply)
	err := c.cc.Invoke(ctx, Back_ConvolutionalLayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackServer is the server API for Back service.
// All implementations must embed UnimplementedBackServer
// for forward compatibility
type BackServer interface {
	Cancel(context.Context, *CancelRequest) (*CancelReply, error)
	ConvolutionalLayer(context.Context, *ConvolutionalLayerBackRequest) (*ConvolutionalLayerBackReply, error)
	mustEmbedUnimplementedBackServer()
}

// UnimplementedBackServer must be embedded to have forward compatible implementations.
type UnimplementedBackServer struct {
}

func (UnimplementedBackServer) Cancel(context.Context, *CancelRequest) (*CancelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedBackServer) ConvolutionalLayer(context.Context, *ConvolutionalLayerBackRequest) (*ConvolutionalLayerBackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvolutionalLayer not implemented")
}
func (UnimplementedBackServer) mustEmbedUnimplementedBackServer() {}

// UnsafeBackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackServer will
// result in compilation errors.
type UnsafeBackServer interface {
	mustEmbedUnimplementedBackServer()
}

func RegisterBackServer(s grpc.ServiceRegistrar, srv BackServer) {
	s.RegisterService(&Back_ServiceDesc, srv)
}

func _Back_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Back_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Back_ConvolutionalLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvolutionalLayerBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackServer).ConvolutionalLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Back_ConvolutionalLayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackServer).ConvolutionalLayer(ctx, req.(*ConvolutionalLayerBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Back_ServiceDesc is the grpc.ServiceDesc for Back service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Back_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mini.Back",
	HandlerType: (*BackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cancel",
			Handler:    _Back_Cancel_Handler,
		},
		{
			MethodName: "ConvolutionalLayer",
			Handler:    _Back_ConvolutionalLayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs-mw.proto",
}

const (
	Master_NotifyPing_FullMethodName = "/mini.Master/NotifyPing"
)

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClient interface {
	NotifyPing(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) NotifyPing(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, Master_NotifyPing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility
type MasterServer interface {
	NotifyPing(context.Context, *PingRequest) (*PingReply, error)
	mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServer struct {
}

func (UnimplementedMasterServer) NotifyPing(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyPing not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
	mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
	s.RegisterService(&Master_ServiceDesc, srv)
}

func _Master_NotifyPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).NotifyPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_NotifyPing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).NotifyPing(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Master_ServiceDesc is the grpc.ServiceDesc for Master service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Master_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mini.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyPing",
			Handler:    _Master_NotifyPing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs-mw.proto",
}
